import { useState, useEffect } from 'react'
import { gsap } from 'gsap'

const LeadForm = ({ isOpen, onClose, formType = 'consultation' }) => {
  const [formData, setFormData] = useState({
    fullName: '',
    phone: '',
    email: '',
    country: ''
  })
  const [errors, setErrors] = useState({})
  const [isSubmitting, setIsSubmitting] = useState(false)

  // –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω —Å –º–∞—Å–∫–∞–º–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
  const countries = [
    { 
      value: '', 
      label: '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É',
      phoneMask: '+7 (999) 123-45-67',
      phoneCode: '+7',
      phoneRegex: /^[\+]?[1-9][\d]{0,15}$/
    },
    { 
      value: 'russia', 
      label: '–†–æ—Å—Å–∏—è',
      phoneMask: '+7 (999) 123-45-67',
      phoneCode: '+7',
      phoneRegex: /^[\+]?7[\d]{10}$/
    },
    { 
      value: 'belarus', 
      label: '–ë–µ–ª–∞—Ä—É—Å—å',
      phoneMask: '+375 (29) 123-45-67',
      phoneCode: '+375',
      phoneRegex: /^[\+]?375[\d]{9}$/
    },
    { 
      value: 'kazakhstan', 
      label: '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω',
      phoneMask: '+7 (999) 123-45-67',
      phoneCode: '+7',
      phoneRegex: /^[\+]?7[\d]{10}$/
    },
    { 
      value: 'moldova', 
      label: '–ú–æ–ª–¥–æ–≤–∞',
      phoneMask: '+373 (22) 123-456',
      phoneCode: '+373',
      phoneRegex: /^[\+]?373[\d]{8}$/
    }
  ]

  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω—É
  const currentCountry = countries.find(c => c.value === formData.country) || countries[0]

  // –ê–Ω–∏–º–∞—Ü–∏–∏
  useEffect(() => {
    if (isOpen) {
      const overlay = document.querySelector('.modal-overlay')
      const content = document.querySelector('.modal-content')
      
      if (!overlay || !content) {
        return
      }

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏
      gsap.set(overlay, { opacity: 0 })
      gsap.set(content, { opacity: 0, scale: 0.8, y: 50 })
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –æ—Ç–∫—Ä—ã—Ç–∏—è
      const tl = gsap.timeline()
      tl.to(overlay, { opacity: 1, duration: 0.3 })
        .to(content, { 
          opacity: 1, 
          scale: 1, 
          y: 0, 
          duration: 0.4, 
          ease: "back.out(1.7)" 
        }, "-=0.2")
    }
  }, [isOpen])

  const handleClose = () => {
    const overlay = document.querySelector('.modal-overlay')
    const content = document.querySelector('.modal-content')
    
    if (!overlay || !content) {
      onClose()
      return
    }

    const tl = gsap.timeline()
    tl.to(content, {
      opacity: 0,
      scale: 0.8,
      y: 50,
      duration: 0.3
    })
    .to(overlay, {
      opacity: 0,
      duration: 0.3
    }, "-=0.1")
    .call(() => onClose())
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è
  const validateForm = () => {
    const newErrors = {}

    if (!formData.fullName.trim()) {
      newErrors.fullName = '–§–ò–û –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è'
    } else if (formData.fullName.trim().length < 2) {
      newErrors.fullName = '–§–ò–û –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞'
    }

    if (!formData.phone.trim()) {
      newErrors.phone = '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
    } else if (!currentCountry.phoneRegex.test(formData.phone.replace(/[\s\-\(\)]/g, ''))) {
      newErrors.phone = `–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (${currentCountry.phoneMask})`
    }

    if (!formData.email.trim()) {
      newErrors.email = 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
    } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.email)) {
      newErrors.email = '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email'
    }

    if (!formData.country) {
      newErrors.country = '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É'
    }

    setErrors(newErrors)
    return Object.keys(newErrors).length === 0
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
  const handleSubmit = async (e) => {
    e.preventDefault()
    
    if (!validateForm()) {
      return
    }

    setIsSubmitting(true)

    try {
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      const selectedCountry = countries.find(c => c.value === formData.country)
      console.log('üéØ –õ–∏–¥-—Ñ–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞:', { 
        ...formData, 
        countryName: selectedCountry?.label || '–ù–µ –≤—ã–±—Ä–∞–Ω–æ',
        formType,
        timestamp: new Date().toISOString()
      })
      
      // –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      await new Promise(resolve => setTimeout(resolve, 2000))
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
      alert('–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.')
      
      // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
      setFormData({ fullName: '', phone: '', email: '', country: '' })
      setErrors({})
      handleClose()
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã:', error)
      alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
    } finally {
      setIsSubmitting(false)
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ø–æ–ª—è—Ö
  const handleChange = (e) => {
    const { name, value } = e.target
    setFormData(prev => ({
      ...prev,
      [name]: value
    }))
    
    // –ï—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å —Å—Ç—Ä–∞–Ω–∞, –æ—á–∏—â–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
    if (name === 'country') {
      setFormData(prev => ({
        ...prev,
        phone: ''
      }))
    }
    
    // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª—è
    if (errors[name]) {
      setErrors(prev => ({
        ...prev,
        [name]: ''
      }))
    }
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä–∞–Ω—ã
  const formatPhone = (value, country) => {
    const phone = value.replace(/\D/g, '')
    const phoneCode = country.phoneCode.replace('+', '')
    
    // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –ø—É—Å—Ç–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
    if (phone.length === 0) {
      return ''
    }
    
    // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
    if (!phone.startsWith(phoneCode)) {
      const cleanPhone = phone.startsWith('+') ? phone.slice(1) : phone
      const fullPhone = phoneCode + cleanPhone
      return formatPhoneByCountry(fullPhone, country)
    }
    
    return formatPhoneByCountry(phone, country)
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã
  const formatPhoneByCountry = (phone, country) => {
    // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –ø—É—Å—Ç–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
    if (!phone || phone.length === 0) {
      return ''
    }

    switch (country.value) {
      case 'russia':
      case 'kazakhstan':
        // +7 (XXX) XXX-XX-XX
        if (phone.length === 0) return ''
        if (phone.length === 1) return `+${phone}`
        if (phone.length <= 4) return `+${phone.slice(0, 1)} (${phone.slice(1)})`
        if (phone.length <= 7) return `+${phone.slice(0, 1)} (${phone.slice(1, 4)}) ${phone.slice(4)}`
        if (phone.length <= 9) return `+${phone.slice(0, 1)} (${phone.slice(1, 4)}) ${phone.slice(4, 7)}-${phone.slice(7)}`
        return `+${phone.slice(0, 1)} (${phone.slice(1, 4)}) ${phone.slice(4, 7)}-${phone.slice(7, 9)}-${phone.slice(9, 11)}`
      
      case 'belarus':
        // +375 (XX) XXX-XX-XX
        if (phone.length === 0) return ''
        if (phone.length <= 3) return `+${phone}`
        if (phone.length <= 5) return `+${phone.slice(0, 3)} (${phone.slice(3)})`
        if (phone.length <= 8) return `+${phone.slice(0, 3)} (${phone.slice(3, 5)}) ${phone.slice(5)}`
        if (phone.length <= 10) return `+${phone.slice(0, 3)} (${phone.slice(3, 5)}) ${phone.slice(5, 8)}-${phone.slice(8)}`
        return `+${phone.slice(0, 3)} (${phone.slice(3, 5)}) ${phone.slice(5, 8)}-${phone.slice(8, 10)}-${phone.slice(10, 12)}`
      
      case 'moldova':
        // +373 (XX) XXX-XXX
        if (phone.length === 0) return ''
        if (phone.length <= 3) return `+${phone}`
        if (phone.length <= 5) return `+${phone.slice(0, 3)} (${phone.slice(3)})`
        if (phone.length <= 8) return `+${phone.slice(0, 3)} (${phone.slice(3, 5)}) ${phone.slice(5)}`
        return `+${phone.slice(0, 3)} (${phone.slice(3, 5)}) ${phone.slice(5, 8)}-${phone.slice(8, 11)}`
      
      default:
        return phone
    }
  }

  const handlePhoneChange = (e) => {
    const inputValue = e.target.value
    const phoneDigits = inputValue.replace(/\D/g, '')
    const phoneCode = currentCountry.phoneCode.replace('+', '')
    
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–∏–ª –≤—Å–µ —Ü–∏—Ñ—Ä—ã, –æ—á–∏—â–∞–µ–º –ø–æ–ª–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é
    if (phoneDigits.length === 0) {
      setFormData(prev => ({
        ...prev,
        phone: ''
      }))
      
      if (errors.phone) {
        setErrors(prev => ({
          ...prev,
          phone: ''
        }))
      }
      return
    }
    
    // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –∫–æ—Ä–æ—á–µ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã, –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    if (phoneDigits.length < phoneCode.length && !phoneDigits.startsWith(phoneCode)) {
      const fullPhone = phoneCode + phoneDigits
      const formatted = formatPhoneByCountry(fullPhone, currentCountry)
      setFormData(prev => ({
        ...prev,
        phone: formatted
      }))
    } else {
      // –û–±—ã—á–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
      const formatted = formatPhone(inputValue, currentCountry)
      setFormData(prev => ({
        ...prev,
        phone: formatted
      }))
    }
    
    if (errors.phone) {
      setErrors(prev => ({
        ...prev,
        phone: ''
      }))
    }
  }


  if (!isOpen) return null

  const formTitle = formType === 'consultation' 
    ? '–ü–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å' 
    : '–ü–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å'

  const formDescription = formType === 'consultation'
    ? '–û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∏ –Ω–∞—à —ç–∫—Å–ø–µ—Ä—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏'
    : '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–æ–ª–Ω–æ–º—É –∫—É—Ä—Å—É –∏ –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ'

  return (
    <div className="modal-overlay fixed inset-0 bg-black/80 backdrop-blur-sm z-50 flex items-center justify-center p-4">
      <div className="modal-content bg-gradient-to-br from-gray-900 to-gray-800 rounded-2xl border border-white/10 shadow-2xl w-full max-w-md">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="p-6 border-b border-white/10">
          <div className="flex justify-between items-center">
            <h2 className="text-2xl font-bold bg-gradient-to-r from-amber-400 to-orange-500 bg-clip-text text-transparent">
              {formTitle}
            </h2>
            <button
              onClick={handleClose}
              className="text-gray-400 hover:text-white transition-colors p-2 hover:bg-white/10 rounded-full"
            >
              <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>
          <p className="text-gray-300 mt-2 text-sm">
            {formDescription}
          </p>
        </div>

        {/* –§–æ—Ä–º–∞ */}
        <form onSubmit={handleSubmit} className="p-6 space-y-6">
          {/* –§–ò–û */}
          <div>
            <label className="block text-sm font-medium text-gray-300 mb-2">
              –§–ò–û *
            </label>
            <input
              type="text"
              name="fullName"
              value={formData.fullName}
              onChange={handleChange}
              className={`w-full px-4 py-3 bg-white/5 border rounded-xl text-white placeholder-gray-400 focus:outline-none focus:ring-2 transition-all ${
                errors.fullName 
                  ? 'border-red-500 focus:ring-red-500/50' 
                  : 'border-white/20 focus:ring-amber-500/50 focus:border-amber-500'
              }`}
              placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è"
            />
            {errors.fullName && (
              <p className="text-red-400 text-sm mt-1">{errors.fullName}</p>
            )}
          </div>

          {/* –¢–µ–ª–µ—Ñ–æ–Ω */}
          <div>
            <label className="block text-sm font-medium text-gray-300 mb-2">
              –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ *
              {formData.country && (
                <span className="text-amber-400 ml-2">
                  ({currentCountry.label})
                </span>
              )}
            </label>
            <input
              type="tel"
              name="phone"
              value={formData.phone}
              onChange={handlePhoneChange}
              className={`w-full px-4 py-3 bg-white/5 border rounded-xl text-white placeholder-gray-400 focus:outline-none focus:ring-2 transition-all ${
                errors.phone 
                  ? 'border-red-500 focus:ring-red-500/50' 
                  : 'border-white/20 focus:ring-amber-500/50 focus:border-amber-500'
              }`}
              placeholder={currentCountry.phoneMask}
              disabled={!formData.country}
              onKeyDown={(e) => {
                // –†–∞–∑—Ä–µ—à–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤
                if (e.key === 'Backspace' || e.key === 'Delete') {
                  return
                }
                // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
                if (!/[0-9+\-\(\)\s]/.test(e.key) && !['Backspace', 'Delete', 'ArrowLeft', 'ArrowRight', 'Tab'].includes(e.key)) {
                  e.preventDefault()
                }
              }}
            />
            {!formData.country && (
              <p className="text-gray-500 text-sm mt-1">
                –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É
              </p>
            )}
            {errors.phone && (
              <p className="text-red-400 text-sm mt-1">{errors.phone}</p>
            )}
          </div>

          {/* Email */}
          <div>
            <label className="block text-sm font-medium text-gray-300 mb-2">
              Email *
            </label>
            <input
              type="email"
              name="email"
              value={formData.email}
              onChange={handleChange}
              className={`w-full px-4 py-3 bg-white/5 border rounded-xl text-white placeholder-gray-400 focus:outline-none focus:ring-2 transition-all ${
                errors.email 
                  ? 'border-red-500 focus:ring-red-500/50' 
                  : 'border-white/20 focus:ring-amber-500/50 focus:border-amber-500'
              }`}
              placeholder="your@email.com"
            />
            {errors.email && (
              <p className="text-red-400 text-sm mt-1">{errors.email}</p>
            )}
          </div>

          {/* –°—Ç—Ä–∞–Ω–∞ */}
          <div>
            <label className="block text-sm font-medium text-gray-300 mb-2">
              –°—Ç—Ä–∞–Ω–∞ *
            </label>
            <div className="relative">
              <select
                name="country"
                value={formData.country}
                onChange={handleChange}
                className={`w-full px-4 py-3 pr-10 bg-white/5 border rounded-xl text-white focus:outline-none focus:ring-2 transition-all appearance-none cursor-pointer ${
                  errors.country 
                    ? 'border-red-500 focus:ring-red-500/50' 
                    : 'border-white/20 focus:ring-amber-500/50 focus:border-amber-500'
                }`}
              >
                {countries.map((country) => (
                  <option 
                    key={country.value} 
                    value={country.value}
                    className="bg-gray-800 text-white"
                  >
                    {country.label}
                  </option>
                ))}
              </select>
              {/* –ö–∞—Å—Ç–æ–º–Ω–∞—è —Å—Ç—Ä–µ–ª–∫–∞ */}
              <div className="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                <svg className="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                </svg>
              </div>
            </div>
            {errors.country && (
              <p className="text-red-400 text-sm mt-1">{errors.country}</p>
            )}
          </div>

          {/* –ö–Ω–æ–ø–∫–∏ */}
          <div className="flex flex-col gap-3 pt-4">
            <button
              type="submit"
              disabled={isSubmitting}
              className={`w-full py-3 px-6 rounded-xl font-bold transition-all duration-300 transform ${
                isSubmitting
                  ? 'bg-gray-600 text-gray-300 cursor-not-allowed'
                  : 'bg-gradient-to-r from-amber-400 to-orange-500 text-black hover:from-amber-300 hover:to-orange-400 hover:scale-105 hover:shadow-2xl hover:shadow-amber-500/25'
              }`}
            >
              {isSubmitting ? (
                <div className="flex items-center justify-center gap-2">
                  <div className="w-4 h-4 border-2 border-gray-300 border-t-transparent rounded-full animate-spin"></div>
                  –û—Ç–ø—Ä–∞–≤–ª—è–µ–º...
                </div>
              ) : (
                '–ü–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å'
              )}
            </button>
            
            <button
              type="button"
              onClick={handleClose}
              className="w-full py-3 px-6 border border-white/20 text-white rounded-xl font-medium hover:bg-white/10 transition-all duration-300"
            >
              –û—Ç–º–µ–Ω–∞
            </button>
          </div>
        </form>
      </div>
    </div>
  )
}

export default LeadForm
